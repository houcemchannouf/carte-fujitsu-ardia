//############################################################################//
// HEAD : (c) ARDIA 2012 : " Any copie and re-utilisation of this file without  
//                           the written consent of ARDIA is forbidden "        
//        --------------------------------------------------------------------  
//        Classification :  (-)No   (-)Confident. ARDIA   (-)Confident. Client  
//        --------------------------------------------------------------------  
//        --------------------------------------------------------------------  
//        Module name : UART0_DRV 
//############################################################################//
// FILE : UART0_DRV.CFG (SOURCE)
//----------------------------------------------------------------------------//
// DESC : Module description
//----------------------------------------------------------------------------//
// LIST : * List of the functions
//----------------------------------------------------------------------------//
// HIST : Version |   Date   | Author           | Description                             
//----------------------------------------------------------------------------//
//         01.00  | 29/07/12 |  Ghariani Ahmed  | Creation of this file
//
//############################################################################//

//****************************************************************************//
// INCLIB
//****************************************************************************//

//****************************************************************************//
// INCUSER


//define register BGR0
#define r8BGRH BGRH0
#define r8BGRL BGRL0
#define r16BGR BGR0

//define register SMR0
#define rSMR SMR0
#define iEnableOutPutPin SMR0_SOE     // Enables the output of serial data
#define iEnableOutPutClock SMR0_SCKE  // Controls the serial clock
#define iClear SMR0_UPCL              // Clear all flags TDR,RDR,LBD,PE,ORE,FRE
#define iReset SMR0_REST              // Reload counter is restarted
#define iIEclock SMR0_EXT             // Executes internal or external clock
#define isetExtClock SMR0_OTO         // Sets an external clock directly to the LIN-USARTÂ’s serial clock
#define iMode SMR0_MD                 // USART operation mode

//define register SCR0
#define rSCR SCR0
#define iTrans SCR0_TXE            // Enable tansmission
#define iRecep SCR0_RXE            // Enable Reception
#define iClearFlag SCR0_CRE        // Clears the error flag
#define iDataForm SCR0_AD          // Specifies the data format Data bit or Adress Bit
#define iDataLength SCR0_CL        // Specifies Data Length 7 or 8
#define iLengthStop SCR0_SBL       // Specifies Length of the stop bie 1 or 2
#define iParity SCR0_P             // Specifies Even or Odd Parity
#define iEnableParity SCR0_PEN     // Enable or disable Parity

//define register RDR0
#define rRDR0 RDR0

//define register TDR0
#define rTDR0 TDR0

//define register SSR0
#define rSSR0 SSR0 
#define iEnableTrInt SSR0_TIE      // Enable Transmission Interrupt
#define iEnableRecInt SSR0_RIE     // Enable Reception Interrupt
#define iSRLM SSR0_BDS             // Send Receive LSB / MSB
#define itrDataFlag SSR0_TDRE      // Transmission data register is full or empty Read only
#define iRecDataFlag SSR0_RDRF     // Reception data register is full or empty Read only
#define iframeError SSR0_FRE       // Framing Error occured  Read only
#define iOverrunError SSR0_ORE     // Overrun Error Occured  Read only
#define iParityError SSR0_PE       // Parity Error Occured  Read only


//define register ECCR0
#define rECCR0 ECCR0
#define iTrIsOn ECCR0_TBI           // Transmission is ongoing Read Only
#define iRecIsOn ECCR0_RBI          // Reception is ongoing Read only
#define iInt ECCR0_BIE              // Enable Bus idle interrupt
#define iEnableStartStop ECCR0_SSM  // Enable start stop bit in synchronous mode 2
#define iEnableClock ECCR0_SCDE     // Enable Clock delay
#define iEnableMS ECCR0_MS          // Enable Master Slave Mode 
#define iLINbreak ECCR0_LBR         // Genarating LIN break Write only
#define iInvertSData ECCR0_INV      // Invert Serial Data


//define register ESCR0
#define rESCR0 ESCR0
#define iSRclock ESCR0_SCES          // Sampling on rising serial clock edge  selection bit
#define iCCO ESCR0_CCO               // Continuous Clock Output enable bit
#define iIOPin iESCR0_SIOP           // SOT Serial Input/Output Pin direct access
#define iEnableOutPin ESCR0_SOPE     // Enable Serial Output pin direct Access
#define iSynLength0 ESCR0_LBL0       // Determine how many serial bit times the LIN synch break is generated
#define iSynLength1 ESCR0_LBL1
#define iSynLength ESCR0_LBL
#define iLINsynBreakFlag ESCR0_LBD   //
#define iEnableLINInt ESCR0_LBIE     // LIN synch break interrupt enable


//define register ESIR0
#define rESIR0 ESIR0
#define iEnableDMA ESIR0_AICD  // Auto Interrupt Clear is enabled (DMA can be used)
#define iNoRcep ESIR0_RBI      // No reception activity since last clear
#define iRDRF ESIR0_RDRF       // Indicates the status of the reception data register RDR
#define iTDRE ESIR0_TDRE       // Indicates the status of the transmission data register TDR
